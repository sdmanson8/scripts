#-----------------------------START-------------------------#
version: "3.8"
########################### NETWORKS ########################
networks:
  web-proxy:
    external:
     name: $WEB_PROXY
  br0:
    name: $MACVLAN
    driver: macvlan
    driver_opts:
      parent: $NETPARENT #your ethernet interface
    ipam:
      config:
        - subnet: $LOCAL_NETWORK # Example 192.168.1.0/24
#-----------------------------------------------------------#
########################### SERVICES ########################
services:
# All services / apps go below this line
########################### FRONTENDS ######################
 #### Traefik v2 - Reverse Proxy ####
 # https://hub.docker.com/_/traefik
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: always
    hostname: traefik
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:$HTTP_PORT
#      - --entrypoints.http.http.redirections.entryPoint.to=https # entrypoints.<your_entrypoint_name>.http.redirections...
      - --entryPoints.https.address=:$HTTPS_PORT
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      #- --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:$TRAEFIK_PORT
#      - --entrypoints.https.http.tls.certresolver=$CERT_RESOLVER
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
#      - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME2 # Pulls main cert for second domain
#      - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME2 # Pulls wildcard cert for second domain
      - --api=true
      - --api.insecure=true
#      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
#      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=$WEB_PROXY
      - --providers.docker.swarmMode=false
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/dynamic_conf.yml # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
#      - --certificatesResolvers.$CERT_RESOLVER.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # letsencrypt Staging Server - uncomment when testing
      - --certificatesResolvers.$CERT_RESOLVER.acme.email=$MY_EMAIL
      - --certificatesResolvers.$CERT_RESOLVER.acme.storage=/acme.json
      - --certificatesResolvers.$CERT_RESOLVER.acme.dnsChallenge.provider=$DNS_PROVIDER
      - --certificatesResolvers.$CERT_RESOLVER.acme.dnsChallenge.delayBeforeCheck=0 
      - --certificatesresolvers.$CERT_RESOLVER.acme.dnschallenge.resolvers=$RESOLVERS
   # Prometheus - Commands #
      - --entryPoints.metrics.address=:$METRICS_PORT
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics=true
      - --metrics.prometheus.entrypoint=metrics
      - --metrics.prometheus=true
      - --metrics.prometheus.addServicesLabels=true
      - --providers.docker.constraints=Label(`traefik.tags`,`public`)
   # Zipkin - Commands #
      - --tracing.serviceName=traefik
      - --tracing.spanNameLimit=250
      - --tracing.zipkin=true
      - --tracing.zipkin.id128Bit=true
      - --tracing.zipkin.httpEndpoint=http://zipkin:9411/api/v2/spans
      - --tracing.zipkin.sameSpan=true
      - --tracing.zipkin.sampleRate=1
      - --accesslog.format=json
      - --accesslog.fields.defaultmode=keep
      - --accesslog.fields.names.ClientUsername=keep
      - --accesslog.fields.headers.defaultmode=keep
    networks:
      - $WEB_PROXY
    ports:
      - target: $HTTP_PORT
        published: $HTTP_PORT
        protocol: tcp
        mode: host
      - target: $HTTPS_PORT
        published: $HTTPS_PORT
        protocol: tcp
        mode: host
      - target: $TRAEFIK_PORT
        published: $TRAEFIK_PORT
        protocol: tcp
        mode: host
    security_opt:
      - no-new-privileges:true # https://docs.docker.com/engine/reference/run/#security-configuration
    volumes:
      - $USERDIR/traefik/rules:/rules # file provider directory
      - /var/run/docker.sock:/var/run/docker.sock:ro # Connect to docker-socket-proxy tcp://docker-socket-proxy:2375
      - $USERDIR/traefik/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $USERDIR/traefik/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
      - $USERDIR/shared:/shared
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - DUCKDNS_TOKEN=$DUCKDNS_TOKEN
    labels:
      - "traefik.enable=true"
      # Prometheus
      - traefik.tags=public
      - traefik.http.services.prometheus.loadbalancer.server.port=$METRICS_PORT
      - traefik.http.routers.prometheus.rule=PathPrefix(`/metrics`)
      - traefik.http.routers.prometheus.service=prometheus@internal
      - traefik.http.routers.prometheus.entrypoints=metrics
      ## HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
 #-----------------------------------------------------------#
  #### Plex - Media Server ####
  # https://hub.docker.com/r/plexinc/pms-docker
  Plex-Media-Server:
    image: plexinc/pms-docker:latest
    container_name: Plex-Media-Server
#    restart: always
    networks:
      web-proxy:
      br0:
        ipv4_address: 192.168.1.160
    security_opt:
      - no-new-privileges:true
    ports:
      - $PLEX_PORT:$PLEX_PORT/tcp
      - 1900:1900
      - 3005:3005
      - 5353:5353
      - 8324:8324
      - 32410:32410
      - 32412:32412
      - 32413:32413
      - 32414:32414
      - 32469:32469
    volumes:
      #- /mnt/user/Series:/Series
      - $USERDIR/Plex-Media-Server:/config
      - /mnt/disks/Movies/downloads:/downloads
      - /mnt/disks/Series:/Series2
     # - /mnt/disks/Series3:/Series3
      - /mnt/user/Series 1:/Series
      - /mnt/disks/Movies:/Movies
     # - /mnt/disks/Storage:/Storage
      - /mnt/user/mergerfs/gdrive:/user:rw,slave
      - /dev/shm:/transcode # Offload transcoding to RAM if you have enough RAM
    #   - $USERDIR/plex_tmp:/transcode
    environment:
      TZ: $TZ
      HOSTNAME: Plex-Media-Server
      PLEX_CLAIM: $PLEX_CLAIM
      PLEX_UID: $PUID
      PLEX_GID: $PGID
      ADVERTISE_IP: http://$SERVER_IP:$PLEX_PORT/
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.Plex-Media-Server-rtr.entrypoints=https
      - traefik.http.routers.Plex-Media-Server-rtr.rule=Host(`plex.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.Plex-Media-Server-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.Plex-Media-Server-rtr.service=Plex-Media-Server-svc
      - traefik.http.services.Plex-Media-Server-svc.loadbalancer.server.port=$PLEX_PORT
 
