#-----------------------------START-------------------------#
version: "3.8"
########################### NETWORKS ########################
networks:
  web-proxy:
    external:
     name: $WEB_PROXY
  br0:
    name: $MACVLAN
    driver: macvlan
    driver_opts:
      parent: $NETPARENT #your ethernet interface
    ipam:
      config:
        - subnet: $LOCAL_NETWORK # Example 192.168.1.0/24
#-----------------------------------------------------------#
########################### SERVICES ########################
services:
# All services / apps go below this line
########################### FRONTENDS ######################
 #### Traefik v2 - Reverse Proxy ####
 # https://hub.docker.com/_/traefik
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: always
    hostname: traefik
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:$HTTP_PORT
#      - --entrypoints.http.http.redirections.entryPoint.to=https # entrypoints.<your_entrypoint_name>.http.redirections...
      - --entryPoints.https.address=:$HTTPS_PORT
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      #- --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:$TRAEFIK_PORT
#      - --entrypoints.https.http.tls.certresolver=$CERT_RESOLVER
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
#      - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME2 # Pulls main cert for second domain
#      - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME2 # Pulls wildcard cert for second domain
      - --api=true
      - --api.insecure=true
#      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
#      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=$WEB_PROXY
      - --providers.docker.swarmMode=false
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/dynamic_conf.yml # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
#      - --certificatesResolvers.$CERT_RESOLVER.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # letsencrypt Staging Server - uncomment when testing
      - --certificatesResolvers.$CERT_RESOLVER.acme.email=$MY_EMAIL
      - --certificatesResolvers.$CERT_RESOLVER.acme.storage=/acme.json
      - --certificatesResolvers.$CERT_RESOLVER.acme.dnsChallenge.provider=$DNS_PROVIDER
      - --certificatesResolvers.$CERT_RESOLVER.acme.dnsChallenge.delayBeforeCheck=0 
      - --certificatesresolvers.$CERT_RESOLVER.acme.dnschallenge.resolvers=$RESOLVERS
   # Prometheus - Commands #
      - --entryPoints.metrics.address=:$METRICS_PORT
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics=true
      - --metrics.prometheus.entrypoint=metrics
      - --metrics.prometheus=true
      - --metrics.prometheus.addServicesLabels=true
      - --providers.docker.constraints=Label(`traefik.tags`,`public`)
   # Zipkin - Commands #
      - --tracing.serviceName=traefik
      - --tracing.spanNameLimit=250
      - --tracing.zipkin=true
      - --tracing.zipkin.id128Bit=true
      - --tracing.zipkin.httpEndpoint=http://zipkin:9411/api/v2/spans
      - --tracing.zipkin.sameSpan=true
      - --tracing.zipkin.sampleRate=1
      - --accesslog.format=json
      - --accesslog.fields.defaultmode=keep
      - --accesslog.fields.names.ClientUsername=keep
      - --accesslog.fields.headers.defaultmode=keep
    networks:
      - $WEB_PROXY
    ports:
      - target: $HTTP_PORT
        published: $HTTP_PORT
        protocol: tcp
        mode: host
      - target: $HTTPS_PORT
        published: $HTTPS_PORT
        protocol: tcp
        mode: host
      - target: $TRAEFIK_PORT
        published: $TRAEFIK_PORT
        protocol: tcp
        mode: host
    security_opt:
      - no-new-privileges:true # https://docs.docker.com/engine/reference/run/#security-configuration
    volumes:
      - $USERDIR/traefik/rules:/rules # file provider directory
      - /var/run/docker.sock:/var/run/docker.sock:ro # Connect to docker-socket-proxy tcp://docker-socket-proxy:2375
      - $USERDIR/traefik/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $USERDIR/traefik/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
      - $USERDIR/shared:/shared
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - DUCKDNS_TOKEN=$DUCKDNS_TOKEN
    labels:
      - "traefik.enable=true"
      # Prometheus
      - traefik.tags=public
      - traefik.http.services.prometheus.loadbalancer.server.port=$METRICS_PORT
      - traefik.http.routers.prometheus.rule=PathPrefix(`/metrics`)
      - traefik.http.routers.prometheus.service=prometheus@internal
      - traefik.http.routers.prometheus.entrypoints=metrics
      ## HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
  #### Prometheus - Metrics for Gathering Data ####
  # https://hub.docker.com/r/wshihadeh/prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    hostname: prometheus
#    ports:
#      - 9791:$PROMETHEUS_PORT
#    environment: &env
#      TRAEFIK_USERNAME: sheldon
#      TRAEFIK_PASSWORD: ramona123
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    volumes:
      - $USERDIR/prometheus:/prometheus
      - $USERDIR/prometheus/configs:/etc/prometheus
    networks:
      -  $WEB_PROXY
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.prometheus-backend.entrypoints=https
      - traefik.http.routers.prometheus-backend.rule=Host(`prometheus.$DOMAINNAME`)
      - traefik.http.routers.prometheus-backend.tls=true
      ## Services
      - traefik.http.routers.prometheus-backend.service=prometheus-backend
      - traefik.http.services.prometheus-backend.loadbalancer.server.port=$PROMETHEUS_PORT
      ## Middlewares
      - traefik.http.routers.prometheus-backend.middlewares=chain-basic-auth@file
  #### Zipkin - Tracing for Traefik ####
  # https://hub.docker.com/r/openzipkin/zipkin
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin:latest
    hostname: zipkin
    restart: always
    ports:
      - $ZIPKIN_PORT:$ZIPKIN_PORT
    networks:
      - $WEB_PROXY
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.zipkin.rule=Host(`zipkin.$DOMAINNAME`)
      - traefik.http.routers.zipkin.service=zipkin
      - traefik.http.routers.zipkin.entrypoints=https
      ## Services
      - traefik.http.services.zipkin.loadbalancer.server.port=$ZIPKIN_PORT
      ## Middlewares
      - traefik.http.routers.zipkin.middlewares=chain-basic-auth@file
  #### Node Exporter - Docker Container Node Exporter for Prometheus ####
  # https://hub.docker.com/r/prom/node-exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    hostname: node-exporter
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    #  - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - $NODEEXP_PORT:$NODEEXP_PORT
    networks:
      - $WEB_PROXY
  #### CAdvisor - Analyze Docker Container resource usage ####
  # https://hub.docker.com/r/google/cadvisor
  cadvisor:
    image: google/cadvisor:latest
    hostname: cadvisor
    container_name: cadvisor
    restart: always
    volumes:
    #  - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8088:$CADVISOR_PORT
    networks:
      - $WEB_PROXY
#### Authelia - Two Factor Authentication ####
#  https://hub.docker.com/r/authelia/authelia
#  Authelia:
#     image: authelia/authelia:latest
#    container_name: Authelia
#    hostname: Authelia
#    volumes:
#      - /etc/localtime:/etc/localtime:ro
#      - /etc/timezone:/etc/timezone:ro
#      - $USERDIR/Authelia:/config
#    networks:
#      - $WEB_PROXY
#    #ports:
#    #  - $AUTHELIA_PORT:$AUTHELIA_PORT
#    restart: always
#    environment:
#      - TZ=$TZ
#    labels:
#      - traefik.enable=true
#      - traefik.tags=public
#      ## HTTP Routers
#      - traefik.http.routers.authelia-rtr.entrypoints=https
#      - traefik.http.routers.authelia-rtr.rule=Host(`auth.$DOMAINNAME`)
#      ## Middlewares
#      - traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file
#      ## HTTP Services
#      - traefik.http.routers.authelia-rtr.service=authelia-svc
#      - traefik.http.services.authelia-svc.loadbalancer.server.port=$AUTHELIA_PORT
#  #### Google OAuth - Single Sign On using OAuth 2.0 ####
#  # https://hub.docker.com/r/thomseddon/traefik-forward-auth
#  oauth:
#    container_name: oauth
#    image: thomseddon/traefik-forward-auth:latest
#    hostname: oauth
#    restart: always
#    networks:
#      - $WEB_PROXY
#    security_opt:
#      - no-new-privileges:true
#    volumes:
#      - /etc/localtime:/etc/localtime:ro
#      - /etc/timezone:/etc/timezone:ro
#    environment:
#      - CLIENT_ID=$GOOGLE_CLIENT_ID
#      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
#      - SECRET=$OAUTH_SECRET
#      - COOKIE_DOMAIN=$DOMAINNAME
#      - INSECURE_COOKIE=false
#      - AUTH_HOST=oauth.$DOMAINNAME
#      - URL_PATH=/_oauth
#      - WHITELIST=$MY_EMAIL
#      - LOG_LEVEL=info
#      - LOG_FORMAT=text
#      - LIFETIME=2592000 # 30 days
#      - DEFAULT_ACTION=auth
#      - DEFAULT_PROVIDER=google
#    labels:
#      - traefik.enable=true
#      - traefik.tags=public
#      ## HTTP Routers
#      - traefik.http.routers.oauth-rtr.entrypoints=https
#      - traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME`)
#      ## HTTP Services
#      - traefik.http.routers.oauth-rtr.service=oauth-svc
#      - traefik.http.services.oauth-svc.loadbalancer.server.port=$OAUTH_PORT
#      ## Middlewares
#      - traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file
  #### Portainer - WebUI for Containers ####
  # https://hub.docker.com/r/portainer/portainer-ce
  Portainer-CE:
    container_name: Portainer-CE
    image: portainer/portainer-ce
    hostname: Portainer-CE
    restart: always
    command: -H unix:///var/run/docker.sock
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    ports:
      - $PORTAINER_PORT:$PORTAINER_PORT
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $USERDIR/Portainer-CE/data:/data
    environment:
      - TZ=$TZ
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.portainer-rtr.entrypoints=https
      - traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.portainer-rtr.service=portainer-svc
      - traefik.http.services.portainer-svc.loadbalancer.server.port=$PORTAINER_PORT
  #### Organizr - Unified Frontend ####
  # https://hub.docker.com/r/organizrtools/organizr-v2
  organizrv2:
    container_name: organizrv2
    image: organizr/organizr
    hostname: organizrv2
    restart: always
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    ports:
      - $ORGANIZER_PORT:$HTTP_PORT
    volumes:
      - $USERDIR/organizrv2:/config
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.organizr-rtr.entrypoints=https
      - traefik.http.routers.organizr-rtr.rule=Host(`$DOMAINNAME`,`www.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.organizr-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.organizr-rtr.service=organizr-svc
      - traefik.http.services.organizr-svc.loadbalancer.server.port=$HTTP_PORT
  # Heimdall - Unified Frontend Alternative
  # https://hub.docker.com/r/linuxserver/heimdall
  heimdall:
    container_name: heimdall
    image: linuxserver/heimdall
    hostname: heimdall
    restart: always
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    ports:
      - $HEIMDALL_PORT:$HTTP_PORT
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - $USERDIR/heimdall/:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.heimdall-rtr.entrypoints=https
      - traefik.http.routers.heimdall-rtr.rule=Host(`heimdall.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.heimdall-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.heimdall-rtr.service=heimdall-svc
      - traefik.http.services.heimdall-svc.loadbalancer.server.port=$HTTP_PORT
#-----------------------------------------------------------#
########################### DATABASE ########################
  #### MariaDB - MySQL Database ####
  # https://hub.docker.com/r/linuxserver/mariadb
  mariadb:
    container_name: mariadb
    image: linuxserver/mariadb:latest
    hostname: mariadb
    restart: always
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    ports:
      - $DB_PORT:$DB_PORT
    volumes:
      - $USERDIR/mariadb/data:/config
      - /var/lib/mysql/mysql.sock:/mysql.sock
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - MYSQL_ROOT_PASSWORD=ramona123
  #### phpMyAdmin - Database management ####
  # https://hub.docker.com/r/phpmyadmin/phpmyadmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    hostname: phpmyadmin
    restart: always
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    depends_on:
      - mariadb
    ports:
      - $PHPMYADMIN_PORT:$HTTP_PORT
    volumes:
      - $USERDIR/phpmyadmin:/var/lib/phpmyadmin/
    environment:
      - PMA_HOST=$DB_HOST
      - PMA_ARBITRARY=1
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.phpmyadmin-rtr.entrypoints=https
      - traefik.http.routers.phpmyadmin-rtr.rule=Host(`pma.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.phpmyadmin-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.phpmyadmin-rtr.service=phpmyadmin-svc
      - traefik.http.services.phpmyadmin-svc.loadbalancer.server.port=$HTTP_PORT
 ### Redis - Key-value Store ####
 # https://hub.docker.com/_/redis
  Redis:
    image: redis:latest
    container_name: Redis
    hostname: Redis
    volumes:
      - $USERDIR/Redis/data:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - $WEB_PROXY
    ports:
      - $REDIS_PORT:$REDIS_PORT
    restart: always
    environment:
      - TZ=$TZ
  #### Redis Commander - Redis Management Tool####
  # https://hub.docker.com/r/rediscommander/redis-commander
  rediscommander:
    container_name: rediscommander
    image: rediscommander/redis-commander:latest
    hostname: rediscom
    restart: always
    networks:
      - $WEB_PROXY
    ports:
      - 8673:$REDISCOMMANDER_PORT
    security_opt:
      - no-new-privileges:true
    environment:
      - REDIS_HOST=redis
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.rediscommander-rtr.entrypoints=https
      - traefik.http.routers.rediscommander-rtr.rule=Host(`rediscom.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.rediscommander-rtr.middlewares=chain-basic-auth@file
      ## HTTP Services
      - traefik.http.routers.rediscommander-rtr.service=rediscommander-svc
      - traefik.http.services.rediscommander-svc.loadbalancer.server.port=$REDISCOMMANDER_PORT
  #### InfluxDB - Database for sensor data ####
  # https://hub.docker.com/_/influxdb
  Influxdb:
    image: influxdb:latest
    container_name: Influxdb
    hostname: Influxdb
    restart: always
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    ports:
      - $INFLUXDB_PORT:$INFLUXDB_PORT
    volumes:
#      - $USERDIR/Influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro
      - $USERDIR/Influxdb/db:/var/lib/influxdb
#    command: -config /etc/influxdb/influxdb.conf
    environment:
      - PUID=$PUID
      - PGID=$PGID
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.influxdb-rtr.entrypoints=https
      - traefik.http.routers.influxdb-rtr.rule=Host(`influxdb.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.influxdb-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.influxdb-rtr.service=influxdb-svc
      - traefik.http.services.influxdb-svc.loadbalancer.server.port=$INFLUXDB_PORT
  #### telegraf - InfluxDB plugin ####
  # https://hub.docker.com/_/telegraf
  telegraf:
    image: telegraf:latest
    container_name: telegraf
    hostname: telegraf
    restart: always
    networks:
      - $WEB_PROXY
    links:
      - Influxdb
    security_opt:
      - no-new-privileges:true
    depends_on:
      - Influxdb
    volumes:
      - $USERDIR/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - /proc:/host/proc:ro
  #### Grafana - Graphical data visualization for InfluxDB data ####
  # https://hub.docker.com/r/grafana/grafana
  Grafana:
    image: grafana/grafana:latest
    container_name: Grafana
    hostname: Grafana
    restart: always
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    ports:
      - $GRAFANA_PORT:$GRAFANA_PORT
    user: "0"
    volumes:
      - $USERDIR/Grafana:/var/lib/grafana
    environment:
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.grafana-rtr.entrypoints=https
      - traefik.http.routers.grafana-rtr.rule=Host(`grafana.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.grafana-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.grafana-rtr.service=grafana-svc
      - traefik.http.services.grafana-svc.loadbalancer.server.port=$GRAFANA_PORT
#-----------------------------------------------------------#
######################### DOWNLOADERS ######################
  #### qbittorrent - Download management ####
  # https://hub.docker.com/r/linuxserver/qbittorrent
  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: always
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    ports:
      - $QBITTORRENT_PORT:$QBITTORRENT_PORT
      - 6881:6881
      - 6881:6881/udp
    volumes:
      - $MERGERFS/gdrive/downloads:/downloads:rw,slave
      - $USERDIR/qbittorrent:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK=022
      - WEBUI_PORT=$QBITTORRENT_PORT
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.qbittorrent-rtr.entrypoints=https
      - traefik.http.routers.qbittorrent-rtr.rule=Host(`qbittorrent.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.qbittorrent-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.qbittorrent-rtr.service=qbittorrent-svc
      - traefik.http.services.qbittorrent-svc.loadbalancer.server.port=$QBITTORRENT_PORT
      
     # SABnzbd - Binary newsgrabber (NZB downloader)
  # https://hub.docker.com/r/linuxserver/sabnzbd
#  sabnzbd:
#    image: linuxserver/sabnzbd:latest
#    container_name: sabnzbd
#    hostname: sabnzbd
#    restart: unless-stopped
#    networks:
#      - $WEB_PROXY
#    security_opt:
#      - no-new-privileges:true
#    ports:
#      - 8185:$SABNZBD_PORT
#    volumes:
#      - $USERDIR/docker/sabnzbd:/config
#      - $MERGERFS/gdrive/downloads:/downloads
#    #   - $USERDIR/Downloads/incomplete:/incomplete-downloads
#    environment:
#      PUID: $PUID
#      PGID: $PGID
#      TZ: $TZ
#      UMASK_SET: 002
#    labels:
#      - traefik.enable=true
#      - traefik.tags=public
#      ## HTTP Routers Auth Bypass
#      - traefik.http.routers.sabnzbd-rtr-bypass.entrypoints=https
#       - traefik.http.routers.sabnzbd-rtr-bypass.rule=Headers(`X-Api-Key`, `$SABNZBD_API_KEY`) || Query(`apikey`, `$SABNZBD_API_KEY`)
#      - traefik.http.routers.sabnzbd-rtr-bypass.priority=100
#      ## HTTP Routers Auth
#      - traefik.http.routers.sabnzbd-rtr.entrypoints=https
#      - traefik.http.routers.sabnzbd-rtr.rule=Host(`sabnzbd.$DOMAINNAME`)
#      - traefik.http.routers.sabnzbd-rtr.priority=99
#      ## Middlewares
#      - traefik.http.routers.sabnzbd-rtr-bypass.middlewares=chain-no-auth@file
#      - traefik.http.routers.sabnzbd-rtr.middlewares=chain-authelia@file
#      ## HTTP Services
#      - traefik.http.routers.sabnzbd-rtr.service=sabnzbd-svc
#      - traefik.http.routers.sabnzbd-rtr-bypass.service=sabnzbd-svc
#      - traefik.http.services.sabnzbd-svc.loadbalancer.server.port=$SABNZBD_PORT
      
#-----------------------------------------------------------#
################################ INDEXERS ###################
  #### Jackett - Torrent proxy ####
  # https://hub.docker.com/r/linuxserver/jackett
  jackett:
    image: linuxserver/jackett:latest
    container_name: jackett
    restart: always
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    ports:
      - $JACKETT_PORT:$JACKETT_PORT
    volumes:
      - $USERDIR/jackett:/config
      - $MERGERFS/gdrive/downloads:/downloads
      - /etc/localtime:/etc/localtime:ro
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.jackett-rtr.entrypoints=https
      - traefik.http.routers.jackett-rtr.rule=Host(`jackett.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.jackett-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.jackett-rtr.service=jackett-svc
      - traefik.http.services.jackett-svc.loadbalancer.server.port=$JACKETT_PORT
      
  # NZBHydra2 - NZB meta search
  # https://hub.docker.com/r/linuxserver/hydra2
#  hydra:
#    image: linuxserver/hydra2:latest
#    container_name: hydra
#    hostname: hydra
#    restart: unless-stopped
#    networks:
#      - $WEB_PROXY
#    security_opt:
#      - no-new-privileges:true
#    ports:
#      - $NZBHYDRA_PORT:5076
#    volumes:
#      - $USERDIR/docker/hydra2:/config
#      - $MERGERFS/gdrive/downloads:/downloads
#    environment:
#      PUID: $PUID
#      PGID: $PGID
#      TZ: $TZ
#    labels:
#      - traefik.enable=true
#      - traefik.tags=public
#      ## HTTP Routers
#      - traefik.http.routers.hydra-rtr.entrypoints=https
#      - traefik.http.routers.hydra-rtr.rule=Host(`hydra.$DOMAINNAME`)
#      ## Middlewares
#      - traefik.http.routers.hydra-rtr.middlewares=chain-authelia@file
#      ## HTTP Services
#      - traefik.http.routers.hydra-rtr.service=hydra-svc
#      - traefik.http.services.hydra-svc.loadbalancer.server.port=5076

#-----------------------------------------------------------#
########################### PVR's ###########################
  #### Radarr4k - Movie management ####
  # https://hub.docker.com/r/hotio/radarr
  radarr4k:
    image: hotio/radarr:latest
    container_name: radarr4k
#    restart: always
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    ports:
      - $RADARR4k_PORT:$RADARR4k_PORT
    volumes:
      - $USERDIR/radarr4k:/config
      - /mnt/disks/Movies/downloads/completed:/downloads:rw
      - /mnt/disks/Movies/4k:/Movies
      - $MERGERFS/gdrive:/user:rw,slave
      - /etc/localtime:/etc/localtime:ro
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers Auth Bypass
      - traefik.http.routers.radarr4k-rtr-bypass.entrypoints=https
      - traefik.http.routers.radarr4k-rtr-bypass.rule=Headers(`X-Api-Key`, `$RADARR4k_API_KEY`) || Query(`apikey`, `$RADARR4k_API_KEY`)
      - traefik.http.routers.radarr4k-rtr-bypass.priority=100
      ## HTTP Routers Auth
      - traefik.http.routers.radarr4k-rtr.entrypoints=https
      - traefik.http.routers.radarr4k-rtr.rule=Host(`radarr4k.$DOMAINNAME`)
      - traefik.http.routers.radarr4k-rtr.priority=99
      ## Middlewares
      - traefik.http.routers.radarr4k-rtr-bypass.middlewares=chain-no-auth@file
      - traefik.http.routers.radarr4k-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.radarr4k-rtr.service=radarr4k-svc
      - traefik.http.routers.radarr4k-rtr-bypass.service=radarr4k-svc
      - traefik.http.services.radarr4k-svc.loadbalancer.server.port=$RADARR4k_PORT
  #### Radarr - Movie management ####
  # https://hub.docker.com/r/linuxserver/radarr
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
#    restart: always
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    ports:
      - $RADARR_PORT:$RADARR_PORT
    volumes:
      - $USERDIR/radarr:/config
      - /mnt/disks/Movies/downloads/completed:/downloads
      - /mnt/disks/Movies/HD:/Movies
      - $MERGERFS/gdrive:/user:rw,slave
      - /etc/localtime:/etc/localtime:ro
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers Auth Bypass
      - traefik.http.routers.radarr-rtr-bypass.entrypoints=https
      - traefik.http.routers.radarr-rtr-bypass.rule=Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`)
      - traefik.http.routers.radarr-rtr-bypass.priority=100
      ## HTTP Routers Auth
      - traefik.http.routers.radarr-rtr.entrypoints=https
      - traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME`)
      - traefik.http.routers.radarr-rtr.priority=99
      ## Middlewares
      - traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file
      - traefik.http.routers.radarr-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.radarr-rtr.service=radarr-svc
      - traefik.http.routers.radarr-rtr-bypass.service=radarr-svc
      - traefik.http.services.radarr-svc.loadbalancer.server.port=$RADARR_PORT
  #### Sonarr4k - TV Shows management ####
  # https://hub.docker.com/r/linuxserver/sonarr
  sonarr4k:
    image: hotio/sonarr:latest
    container_name: sonarr4k
#    restart: always
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    ports:
      - $SONARR4k_PORT:$SONARR4k_PORT
    volumes:
      - $USERDIR/sonarr4k:/config
      - /mnt/disks/Movies/downloads/completed:/downloads
      - /mnt/user/Series 1/4k:/Series
      - /mnt/disks/Series/4k:/Series2
      - $MERGERFS/gdrive:/user:rw,slave     
      - /etc/localtime:/etc/localtime:ro 
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers Auth Bypass
      - traefik.http.routers.sonarr4k-rtr-bypass.entrypoints=https
      - traefik.http.routers.sonarr4k-rtr-bypass.rule=Headers(`X-Api-Key`, `$SONARR4k_API_KEY`) || Query(`apikey`, `$SONARR4k_API_KEY`)
      - traefik.http.routers.sonarr4k-rtr-bypass.priority=100
      ## HTTP Routers Auth
      - traefik.http.routers.sonarr4k-rtr.entrypoints=https
      - traefik.http.routers.sonarr4k-rtr.rule=Host(`sonarr4k.$DOMAINNAME`)
      - traefik.http.routers.sonarr4k-rtr.priority=99
      ## Middlewares
      - traefik.http.routers.sonarr4k-rtr-bypass.middlewares=chain-no-auth@file
      - traefik.http.routers.sonarr4k-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.sonarr4k-rtr.service=sonarr4k-svc
      - traefik.http.routers.sonarr4k-rtr-bypass.service=sonarr4k-svc
      - traefik.http.services.sonarr4k-svc.loadbalancer.server.port=$SONARR4k_PORT
  #### Sonarr - TV Shows management ####
  # https://hub.docker.com/r/linuxserver/sonarr
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
#    restart: always
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    ports:
      - $SONARR_PORT:$SONARR_PORT
    volumes:
      - $USERDIR/docker/sonarr:/config
      - /mnt/disks/Movies/downloads/completed:/downloads
      - /mnt/user/Series 1/HD:/Series
      - /mnt/disks/Series/HD:/Series2
      - $MERGERFS/gdrive:/user:rw,slave
      - /etc/localtime:/etc/localtime:ro
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers Auth Bypass
      - traefik.http.routers.sonarr-rtr-bypass.entrypoints=https
      - traefik.http.routers.sonarr-rtr-bypass.rule=Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`)
      - traefik.http.routers.sonarr-rtr-bypass.priority=100
      ## HTTP Routers Auth
      - traefik.http.routers.sonarr-rtr.entrypoints=https
      - traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME`)
      - traefik.http.routers.sonarr-rtr.priority=99
      ## Middlewares
      - traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file
      - traefik.http.routers.sonarr-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.sonarr-rtr.service=sonarr-svc
      - traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc
      - traefik.http.services.sonarr-svc.loadbalancer.server.port=$SONARR_PORT
#-----------------------------------------------------------#
  ############ Plex - Media Server #########################
  # https://hub.docker.com/r/plexinc/pms-docker
  Plex-Media-Server:
    image: plexinc/pms-docker:latest
    container_name: Plex-Media-Server
#    restart: always
    networks:
      web-proxy:
      br0:
        ipv4_address: 192.168.1.161
    security_opt:
      - no-new-privileges:true
    ports:
      - $PLEX_PORT:$PLEX_PORT/tcp
      - 1900:1900
      - 3005:3005
      - 5353:5353
      - 8324:8324
      - 32410:32410
      - 32412:32412
      - 32413:32413
      - 32414:32414
      - 32469:32469
    volumes:
      #- /mnt/user/Series:/Series
      - $USERDIR/Plex-Media-Server:/config
      - /mnt/disks/Movies/downloads:/downloads
      - /mnt/disks/Series:/Series2
     # - /mnt/disks/Series3:/Series3
      - /mnt/user/Series 1:/Series
      - /mnt/disks/Movies:/Movies
     # - /mnt/disks/Storage:/Storage
      - $MERGERFS/gdrive:/user:rw,slave
      - /dev/shm:/transcode # Offload transcoding to RAM if you have enough RAM
    #   - $USERDIR/plex_tmp:/transcode
    environment:
      TZ: $TZ
      HOSTNAME: Plex-Media-Server
      PLEX_CLAIM: $PLEX_CLAIM
      PLEX_UID: $PUID
      PLEX_GID: $PGID
      ADVERTISE_IP: http://$SERVER_IP:$PLEX_PORT/
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.Plex-Media-Server-rtr.entrypoints=https
      - traefik.http.routers.Plex-Media-Server-rtr.rule=Host(`plex.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.Plex-Media-Server-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.Plex-Media-Server-rtr.service=Plex-Media-Server-svc
      - traefik.http.services.Plex-Media-Server-svc.loadbalancer.server.port=$PLEX_PORT
  #### Ombi - Media Requests ####
  # https://hub.docker.com/r/linuxserver/ombi
  ombi:
    image: linuxserver/ombi:development
    container_name: ombi
#    restart: always
    networks:
      - $WEB_PROXY
    ports:
      - $OMBI_PORT:$OMBI_PORT
    security_opt:
      - no-new-privileges:true
    volumes:
      - $USERDIR/ombi:/config
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
#      BASE_URL: /ombi #optional
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.ombi-rtr.entrypoints=https
      - traefik.http.routers.ombi-rtr.rule=Host(`ombi.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.ombi-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.ombi-rtr.service=ombi-svc
      - traefik.http.services.ombi-svc.loadbalancer.server.port=$OMBI_PORT
  #### Tautulli - Plex statistics and monitoring ####
  # https://hub.docker.com/r/tautulli/tautulli
  tautulli:
    image: tautulli/tautulli:latest
    container_name: tautulli
    restart: always
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    ports:
      - $TAUTULLI_PORT:$TAUTULLI_PORT
    volumes:
      - $USERDIR/tautulli/config:/config
      - $USERDIR/tautulli/logs:/logs:ro
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.tautulli-rtr.entrypoints=https
      - traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.tautulli-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.tautulli-rtr.service=tautulli-svc
      - traefik.http.services.tautulli-svc.loadbalancer.server.port=$TAUTULLI_PORT
#-----------------------------------------------------------#
  ############ MEDIA FILE MANAGEMENT #######################	  

# Bazarr - Subtitle Management
  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    restart: "no"
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$BAZARR_PORT:6767"
    volumes:
      - $DOCKERDIR/bazarr:/config
      - $MERGERFS/gdrive:/data:rw,slave
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.bazarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr-bypass.rule=Host(`bazarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$BAZARR_API_KEY`) || Query(`apikey`, `$BAZARR_API_KEY`))"
      - "traefik.http.routers.bazarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.bazarr-rtr.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.$DOMAINNAME`)"
      - "traefik.http.routers.bazarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.bazarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.bazarr-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.bazarr-rtr.service=bazarr-svc"
      - "traefik.http.routers.bazarr-rtr-bypass.service=bazarr-svc"
      - "traefik.http.services.bazarr-svc.loadbalancer.server.port=6767"
      
  #-----------------------------------------------------------#
####################### MEDIA FILE MANAGEMENT ###############
#  #### Nextcloud - On-site Cloud Storage ####
#  # https://hub.docker.com/_/nextcloud
#  nextcloud:
#    image: nextcloud:latest
#    container_name: nextcloud
#    hostname: nextcloud
#    restart: always
#    depends_on:
#      - mariadb
#      - redis
#    networks:
#      - $WEB_PROXY
#    ports:
#      - 8396:$HTTP_PORT
#    security_opt:
#      - no-new-privileges:true
#    volumes:
#      - $USERDIR/docker/nextcloud:/config
#    environment:
#      - PUID=$PUID
#      - PGID=$PGID
#      - TZ=$TZ
#      - APACHE_DISABLE_REWRITE_IP=1
#      - TRUSTED_PROXIES=traefik
#      - OVERWRITEPROTOCOL=https
#      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.$DOMAINNAME
#      - MYSQL_DATABASE=$NEXTCLOUD_DB
#      - MYSQL_USER=$NEXTCLOUD_USER
#      - MYSQL_PASSWORD=$NEXTCLOUD_PASSWORD
#      - MYSQL_HOST=$NEXTCLOUD_HOST
#      - REDIS_HOST=$REDIS_HOST
#    labels:
#      - traefik.enable=true
#      - traefik.tags=public
#      ## HTTP Routers
#      - traefik.http.routers.nextcloud-rtr.entrypoints=https
#      - traefik.http.routers.nextcloud-rtr.rule=Host(`nextcloud.$DOMAINNAME`)
#      ## Middlewares
#      - traefik.http.middlewares.nextcloud-secure.headers.referrerPolicy=same-origin
#      - traefik.http.middlewares.nextcloud-secure.headers.stsSeconds=63072000
#      - traefik.http.middlewares.nextcloud-secure.headers.forceSTSHeader=true
#      - traefik.http.middlewares.nextcloud-secure.headers.stsPreload=true
#      - traefik.http.middlewares.nextcloud-secure.headers.stsIncludeSubdomains=true
#      - traefik.http.middlewares.nextcloud-secure.headers.browserXssFilter=true
#      - traefik.http.middlewares.nextcloud-secure.headers.customRequestHeaders.X-Forwarded-Proto=https
#      - traefik.http.routers.nextcloud-rtr.middlewares=nextcloud-secure,middlewares-nextcloud-redirectregex@file
#      ## HTTP Services
#      - traefik.http.services.nextcloud-svc.loadbalancer.server.port=$HTTP_PORT
#      - traefik.http.routers.nextcloud-secure.service=nextcloud-svc
      
  #### Nextcloud_cron - Scheduled cron jobs for Nextcloud ####
#  nextcloud_cron:
#    image: nextcloud:latest
#    container_name: nextcloud_cron
#    hostname: nextcloud_cron
#    restart: always
#    depends_on:
#      - nextcloud
#    networks:
#      - $WEB_PROXY
#    entrypoint: /cron.sh
#    volumes:
#      - $USERDIR/docker/nextcloud:/var/www/html
#    environment:
#      - TZ=$TZ

  #### OnlyOffice - Document server for NextCloud ####
  # https://hub.docker.com/r/onlyoffice/documentserver
#  onlyoffice:
#    container_name: onlyoffice
#    image: onlyoffice/documentserver:latest
#    hostname: onlyoffice
#    stdin_open: true
#    tty: true
#    restart: always
#    networks:
#      - $WEB_PROXY
#    ports:
#      - "$ONLYOFFICE_PORT:$HTTP_PORT"
#    security_opt:
#      - no-new-privileges:true
#    volumes:
#      #- onlyoffice_logs:/var/log/onlyoffice
#      #- onlyoffice_fonts:/usr/share/fonts/truetype/custom
#      - /etc/timezone:/etc/timezone:ro
#      - /etc/localtime:/etc/localtime:ro
#    labels:
#      - traefik.enable=true
#      - traefik.tags=public
#      ## HTTPS Routers
#      - traefik.http.routers.onlyoffice-rtr.entrypoints=https
#      - traefik.http.routers.onlyoffice-rtr.rule=Host(`onlyoffice.$DOMAINNAME`)
#      ## Middlewares
#      - traefik.http.middlewares.onlyoffice-headers.headers.forceSTSHeader=true
#      - traefik.http.middlewares.onlyoffice-headers.headers.stsSeconds=63072000
#      - traefik.http.middlewares.onlyoffice-headers.headers.stsIncludeSubdomains=true
#     - traefik.http.middlewares.onlyoffice-headers.headers.stsPreload=true
#      - traefik.http.middlewares.onlyoffice-headers.headers.browserXssFilter=true
#      - traefik.http.middlewares.onlyoffice-headers.headers.referrerPolicy=same-origin
#      - traefik.http.middlewares.onlyoffice-headers.headers.customRequestHeaders.X-Forwarded-Proto=https
#      - traefik.http.routers.onlyoffice-rtr.middlewares=onlyoffice-headers,middlewares-nextcloud-redirectregex@file
#      ## HTTP Services
#      - traefik.http.routers.onlyoffice.service=onlyoffice-svc
#      - traefik.http.services.onlyoffice-svc.loadbalancer.server.port=$HTTP_PORT

#-----------------------------------------------------------#
  ####################### UTILITIES ##########################
  # Firefox - Web Broswer
  firefox:
    image: jlesage/firefox:latest
    container_name: firefox
    restart: unless-stopped
    networks:
      web-proxy:
      br0:
        ipv4_address: 192.168.4.161
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined # October 15, 2020 https://github.com/jlesage/docker-firefox/blob/master/README.md#allowing-the-membarrier-system-call
    ports:
       - 5800:5800
    volumes:
      - $USERDIR/firefox:/config
      - /mnt/user/rclone_mergerfs/gdrive/downloads:/data/downloads:rw,slave
      - /dev/shm:/dev/shm
    environment:
      USER_ID: $PUID
      GROUP_ID: $PGID
      TZ: $TZ
      UMASK: 002
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1920
      DISPLAY_HEIGHT: 1080
    labels:
      - traefik.enable=true
      - traefik.tags=public
      ## HTTP Routers
      - traefik.http.routers.firefox-rtr.entrypoints=https
      - traefik.http.routers.firefox-rtr.rule=Host(`firefox.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.firefox-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.firefox-rtr.service=firefox-svc
      - traefik.http.services.firefox-svc.loadbalancer.server.port=5800
  # Glances - System Information
  glances:
    image: nicolargo/glances:latest
    container_name: glances
    restart: unless-stopped
    privileged: true
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$GLANCES_PORT:61208"
    pid: host
    volumes:
      - $DOCKERDIR/glances/glances.conf:/glances/conf/glances.conf # Use this if you want to add a glances.conf file
      - $USERDIR:/data/home:ro
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
    environment:
      # GLANCES_OPT: "-C /glances/conf/glances.conf --quiet --export influxdb"
      # GLANCES_OPT: "--export influxdb"
      GLANCES_OPT: "-w"
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.glances-rtr.entrypoints=https"
      - "traefik.http.routers.glances-rtr.rule=Host(`glances.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.glances-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.glances-rtr.service=glances-svc"
      - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"

  # qDirStat - Directory Statistics
  qdirstat:
    image: jlesage/qdirstat:latest
    container_name: qdirstat
    restart: unless-stopped
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$QDIRSTAT_PORT:5800"
    volumes:
      - $USERDIR:/data/home:ro
      - $DOCKERDIR/qdirstat/config:/config:rw
    environment:
      USER_ID: $PUID
      GROUP_ID: $PGID
      UMASK: 002
      TZ: $TZ
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      VNC_PASSWORD: $QDIRSTAT_VNC_PASSWD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.qdirstat-rtr.entrypoints=https"
      - "traefik.http.routers.qdirstat-rtr.rule=Host(`qdirstat.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.qdirstat-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.qdirstat-rtr.service=qdirstat-svc"
      - "traefik.http.services.qdirstat-svc.loadbalancer.server.port=5800"

  # Guacamole - Remote desktop, SSH, on Telnet on any HTML5 Browser
  # Create all databases and tables first
  guacamole:
    image: guacamole/guacamole:latest
    container_name: guacamole
    restart: unless-stopped
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$GUACAMOLE_PORT:8080"
    environment:
      GUACD_HOSTNAME: guacd
      MYSQL_HOSTNAME: $MARIADB_HOST
      MYSQL_PORT: $MARIADB_PORT
      MYSQL_DATABASE_FILE: /run/secrets/guac_db_name
      MYSQL_USER_FILE: /run/secrets/guac_mysql_user
      MYSQL_PASSWORD_FILE: /run/secrets/guac_mysql_password
    secrets:
      - guac_db_name
      - guac_mysql_user
      - guac_mysql_password
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.guacamole-rtr.entrypoints=https"
      - "traefik.http.routers.guacamole-rtr.rule=Host(`guac.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.guacamole-rtr.middlewares=chain-oauth@file,add-guacamole"
      - "traefik.http.middlewares.add-guacamole.addPrefix.prefix=/guacamole"
      ## HTTP Services
      - "traefik.http.routers.guacamole-rtr.service=guacamole-svc"
      - "traefik.http.services.guacamole-svc.loadbalancer.server.port=8080"

  # Guacamole Daemon - Needed for Guacamole
  guacd:
    image: guacamole/guacd
    container_name: guacd
    restart: unless-stopped
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    networks:
      - $WEB_PROXY
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$DOZZLE_PORT:8080"
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
      DOCKER_HOST: tcp://socket-proxy:2375
    # volumes:
    #  - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"
	  
  #### OpenVPN-as ####
  # https://hub.docker.com/r/linuxserver/openvpn-as
  openvpn-as:
    image: linuxserver/openvpn-as:latest
    container_name: openvpn-as
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - INTERFACE=eth0 #optional
    volumes:
      - $USERDIR/openvpn-as:/config
    ports:
      - 943:943
      - 9443:9443
      - 1194:1194/udp
    restart: always
    network_mode: bridge
  #-----------------------------------------------------------#
  ##################### MAINTENANCE ##########################

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    restart: unless-stopped
    networks:
      - $WEB_PROXY 
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      DOCKER_HOST: tcp://$SERVER_IP:2375

  # Traefik Certs Dumper - Extract LetsEncrypt Certificates - Traefik2 Compatible
  certdumper:
    container_name: traefik_certdumper
    image: humenius/traefik-certs-dumper:latest
    network_mode: none
    security_opt:
      - no-new-privileges:true
    # command: --restart-containers container1,container2,container3
    volumes:
      - $DOCKERDIR/traefik/acme:/traefik:ro
      #- $DOCKERDIR/shared/certs:/output:rw
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Only needed if restarting containers (use Docker Socket Proxy instead)
    environment:
      DOMAIN: $DOMAINNAME

#-----------------------------------------------------#	  
  #### DuckDns ####
  # https://hub.docker.com/r/linuxserver/duckdns
  duckdns:
    image: linuxserver/duckdns:latest
    container_name: duckdns
    hostname: duckdns
    environment:
      - PUID=$PUID #optional
      - PGID=$PGID #optional
      - TZ=$TZ
      - SUBDOMAINS=$DOMAINNAME
      - TOKEN=$DUCKDNS_TOKEN
      - LOG_FILE=false #optional
    network_mode: 'host'
    volumes:
      - $USERDIR/duckdns/config:/config #optional
    restart: always
#-----------------------------END-------------------------#
